// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,r;e=this,r=function(){"use strict";var e="function"==typeof Object.defineProperty?Object.defineProperty:null,r=Object.defineProperty,t=Object.prototype,n=t.toString,o=t.__defineGetter__,u=t.__defineSetter__,i=t.__lookupGetter__,a=t.__lookupSetter__,l=function(){try{return e({},"x",{}),!0}catch(e){return!1}}()?r:function(e,r,l){var f,c,_,p;if("object"!=typeof e||null===e||"[object Array]"===n.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof l||null===l||"[object Array]"===n.call(l))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+l+"`.");if((c="value"in l)&&(i.call(e,r)||a.call(e,r)?(f=e.__proto__,e.__proto__=t,delete e[r],e[r]=l.value,e.__proto__=f):e[r]=l.value),_="get"in l,p="set"in l,c&&(_||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&o&&o.call(e,r,l.get),p&&u&&u.call(e,r,l.set),e};function f(e,r,t){l(e,r,{configurable:!1,enumerable:!1,writable:!1,value:t})}function c(e){return e!=e}function _(e){return Math.abs(e)}function p(e,r,t,n,o){var u,i,a,l,f,p,d,b;if(i=t<0?(1-e)*t:0,a=o<0?-o:0,u=0,e<=0)return n[a]=u,n[a+o]=0,n;if(1===e||0===t)return c(r[i])?(n[a]=u,n[a+o]=0,n):(n[a]=r[i],n[a+o]=1,n);for(p=0,d=0,b=0;b<e;b++)!1===c(l=r[i])&&(f=u+l,_(u)>=_(l)?p+=u-f+l:p+=l-f+u,u=f,d+=1),i+=t;return n[a]=u+p,n[a+o]=d,n}function d(e,r,t,n,o,u,i){var a,l,f,p,d,b,s,y;if(l=n,f=i,a=0,e<=0)return o[f]=a,o[f+u]=0,o;if(1===e||0===t)return c(r[l])?(o[f]=a,o[f+u]=0,o):(o[f]=r[l],o[f+u]=1,o);for(b=0,s=0,y=0;y<e;y++)!1===c(p=r[l])&&(d=a+p,_(a)>=_(p)?b+=a-d+p:b+=p-d+a,a=d,s+=1),l+=t;return o[f]=a+b,o[f+u]=s,o}function b(e,r,t,n,o){return p(e,r,t,n,o)}return f(p,"ndarray",d),f(b,"ndarray",(function(e,r,t,n,o,u,i){return d(e,r,t,n,o,u,i)})),b},"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).dnannsum=r();
//# sourceMappingURL=browser.js.map
